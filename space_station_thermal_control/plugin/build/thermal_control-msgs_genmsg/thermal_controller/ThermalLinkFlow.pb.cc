// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: thermal_controller/ThermalLinkFlow.proto

#include "thermal_controller/ThermalLinkFlow.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_thermal_5fcontroller_2fThermalLinkFlow_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ThermalLinkFlow_thermal_5fcontroller_2fThermalLinkFlow_2eproto;
namespace thermal_controller {
class ThermalLinkFlowDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ThermalLinkFlow> _instance;
} _ThermalLinkFlow_default_instance_;
class ThermalLinkFlow_VDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ThermalLinkFlow_V> _instance;
} _ThermalLinkFlow_V_default_instance_;
}  // namespace thermal_controller
static void InitDefaultsscc_info_ThermalLinkFlow_thermal_5fcontroller_2fThermalLinkFlow_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::thermal_controller::_ThermalLinkFlow_default_instance_;
    new (ptr) ::thermal_controller::ThermalLinkFlow();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::thermal_controller::ThermalLinkFlow::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ThermalLinkFlow_thermal_5fcontroller_2fThermalLinkFlow_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ThermalLinkFlow_thermal_5fcontroller_2fThermalLinkFlow_2eproto}, {}};

static void InitDefaultsscc_info_ThermalLinkFlow_V_thermal_5fcontroller_2fThermalLinkFlow_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::thermal_controller::_ThermalLinkFlow_V_default_instance_;
    new (ptr) ::thermal_controller::ThermalLinkFlow_V();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::thermal_controller::ThermalLinkFlow_V::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ThermalLinkFlow_V_thermal_5fcontroller_2fThermalLinkFlow_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ThermalLinkFlow_V_thermal_5fcontroller_2fThermalLinkFlow_2eproto}, {
      &scc_info_ThermalLinkFlow_thermal_5fcontroller_2fThermalLinkFlow_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_thermal_5fcontroller_2fThermalLinkFlow_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_thermal_5fcontroller_2fThermalLinkFlow_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_thermal_5fcontroller_2fThermalLinkFlow_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_thermal_5fcontroller_2fThermalLinkFlow_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::thermal_controller::ThermalLinkFlow, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::thermal_controller::ThermalLinkFlow, from_),
  PROTOBUF_FIELD_OFFSET(::thermal_controller::ThermalLinkFlow, to_),
  PROTOBUF_FIELD_OFFSET(::thermal_controller::ThermalLinkFlow, conductance_),
  PROTOBUF_FIELD_OFFSET(::thermal_controller::ThermalLinkFlow, heat_flow_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::thermal_controller::ThermalLinkFlow_V, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::thermal_controller::ThermalLinkFlow_V, flows_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::thermal_controller::ThermalLinkFlow)},
  { 9, -1, sizeof(::thermal_controller::ThermalLinkFlow_V)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::thermal_controller::_ThermalLinkFlow_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::thermal_controller::_ThermalLinkFlow_V_default_instance_),
};

const char descriptor_table_protodef_thermal_5fcontroller_2fThermalLinkFlow_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n(thermal_controller/ThermalLinkFlow.pro"
  "to\022\022thermal_controller\"S\n\017ThermalLinkFlo"
  "w\022\014\n\004from\030\001 \001(\t\022\n\n\002to\030\002 \001(\t\022\023\n\013conductan"
  "ce\030\003 \001(\001\022\021\n\theat_flow\030\004 \001(\001\"G\n\021ThermalLi"
  "nkFlow_V\0222\n\005flows\030\001 \003(\0132#.thermal_contro"
  "ller.ThermalLinkFlowb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_thermal_5fcontroller_2fThermalLinkFlow_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_thermal_5fcontroller_2fThermalLinkFlow_2eproto_sccs[2] = {
  &scc_info_ThermalLinkFlow_thermal_5fcontroller_2fThermalLinkFlow_2eproto.base,
  &scc_info_ThermalLinkFlow_V_thermal_5fcontroller_2fThermalLinkFlow_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_thermal_5fcontroller_2fThermalLinkFlow_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_thermal_5fcontroller_2fThermalLinkFlow_2eproto = {
  false, false, descriptor_table_protodef_thermal_5fcontroller_2fThermalLinkFlow_2eproto, "thermal_controller/ThermalLinkFlow.proto", 228,
  &descriptor_table_thermal_5fcontroller_2fThermalLinkFlow_2eproto_once, descriptor_table_thermal_5fcontroller_2fThermalLinkFlow_2eproto_sccs, descriptor_table_thermal_5fcontroller_2fThermalLinkFlow_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_thermal_5fcontroller_2fThermalLinkFlow_2eproto::offsets,
  file_level_metadata_thermal_5fcontroller_2fThermalLinkFlow_2eproto, 2, file_level_enum_descriptors_thermal_5fcontroller_2fThermalLinkFlow_2eproto, file_level_service_descriptors_thermal_5fcontroller_2fThermalLinkFlow_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_thermal_5fcontroller_2fThermalLinkFlow_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_thermal_5fcontroller_2fThermalLinkFlow_2eproto)), true);
namespace thermal_controller {

// ===================================================================

void ThermalLinkFlow::InitAsDefaultInstance() {
}
class ThermalLinkFlow::_Internal {
 public:
};

ThermalLinkFlow::ThermalLinkFlow(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:thermal_controller.ThermalLinkFlow)
}
ThermalLinkFlow::ThermalLinkFlow(const ThermalLinkFlow& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_from().empty()) {
    from_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_from(),
      GetArena());
  }
  to_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_to().empty()) {
    to_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_to(),
      GetArena());
  }
  ::memcpy(&conductance_, &from.conductance_,
    static_cast<size_t>(reinterpret_cast<char*>(&heat_flow_) -
    reinterpret_cast<char*>(&conductance_)) + sizeof(heat_flow_));
  // @@protoc_insertion_point(copy_constructor:thermal_controller.ThermalLinkFlow)
}

void ThermalLinkFlow::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ThermalLinkFlow_thermal_5fcontroller_2fThermalLinkFlow_2eproto.base);
  from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&conductance_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&heat_flow_) -
      reinterpret_cast<char*>(&conductance_)) + sizeof(heat_flow_));
}

ThermalLinkFlow::~ThermalLinkFlow() {
  // @@protoc_insertion_point(destructor:thermal_controller.ThermalLinkFlow)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ThermalLinkFlow::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  from_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ThermalLinkFlow::ArenaDtor(void* object) {
  ThermalLinkFlow* _this = reinterpret_cast< ThermalLinkFlow* >(object);
  (void)_this;
}
void ThermalLinkFlow::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ThermalLinkFlow::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ThermalLinkFlow& ThermalLinkFlow::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ThermalLinkFlow_thermal_5fcontroller_2fThermalLinkFlow_2eproto.base);
  return *internal_default_instance();
}


void ThermalLinkFlow::Clear() {
// @@protoc_insertion_point(message_clear_start:thermal_controller.ThermalLinkFlow)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  from_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  to_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&conductance_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&heat_flow_) -
      reinterpret_cast<char*>(&conductance_)) + sizeof(heat_flow_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ThermalLinkFlow::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_from();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "thermal_controller.ThermalLinkFlow.from"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string to = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_to();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "thermal_controller.ThermalLinkFlow.to"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double conductance = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          conductance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double heat_flow = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          heat_flow_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ThermalLinkFlow::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:thermal_controller.ThermalLinkFlow)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string from = 1;
  if (this->from().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_from().data(), static_cast<int>(this->_internal_from().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "thermal_controller.ThermalLinkFlow.from");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_from(), target);
  }

  // string to = 2;
  if (this->to().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_to().data(), static_cast<int>(this->_internal_to().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "thermal_controller.ThermalLinkFlow.to");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_to(), target);
  }

  // double conductance = 3;
  if (!(this->conductance() <= 0 && this->conductance() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_conductance(), target);
  }

  // double heat_flow = 4;
  if (!(this->heat_flow() <= 0 && this->heat_flow() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_heat_flow(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:thermal_controller.ThermalLinkFlow)
  return target;
}

size_t ThermalLinkFlow::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:thermal_controller.ThermalLinkFlow)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string from = 1;
  if (this->from().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_from());
  }

  // string to = 2;
  if (this->to().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_to());
  }

  // double conductance = 3;
  if (!(this->conductance() <= 0 && this->conductance() >= 0)) {
    total_size += 1 + 8;
  }

  // double heat_flow = 4;
  if (!(this->heat_flow() <= 0 && this->heat_flow() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ThermalLinkFlow::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:thermal_controller.ThermalLinkFlow)
  GOOGLE_DCHECK_NE(&from, this);
  const ThermalLinkFlow* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ThermalLinkFlow>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:thermal_controller.ThermalLinkFlow)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:thermal_controller.ThermalLinkFlow)
    MergeFrom(*source);
  }
}

void ThermalLinkFlow::MergeFrom(const ThermalLinkFlow& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:thermal_controller.ThermalLinkFlow)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.from().size() > 0) {
    _internal_set_from(from._internal_from());
  }
  if (from.to().size() > 0) {
    _internal_set_to(from._internal_to());
  }
  if (!(from.conductance() <= 0 && from.conductance() >= 0)) {
    _internal_set_conductance(from._internal_conductance());
  }
  if (!(from.heat_flow() <= 0 && from.heat_flow() >= 0)) {
    _internal_set_heat_flow(from._internal_heat_flow());
  }
}

void ThermalLinkFlow::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:thermal_controller.ThermalLinkFlow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ThermalLinkFlow::CopyFrom(const ThermalLinkFlow& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:thermal_controller.ThermalLinkFlow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThermalLinkFlow::IsInitialized() const {
  return true;
}

void ThermalLinkFlow::InternalSwap(ThermalLinkFlow* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  from_.Swap(&other->from_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  to_.Swap(&other->to_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ThermalLinkFlow, heat_flow_)
      + sizeof(ThermalLinkFlow::heat_flow_)
      - PROTOBUF_FIELD_OFFSET(ThermalLinkFlow, conductance_)>(
          reinterpret_cast<char*>(&conductance_),
          reinterpret_cast<char*>(&other->conductance_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ThermalLinkFlow::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ThermalLinkFlow_V::InitAsDefaultInstance() {
}
class ThermalLinkFlow_V::_Internal {
 public:
};

ThermalLinkFlow_V::ThermalLinkFlow_V(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  flows_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:thermal_controller.ThermalLinkFlow_V)
}
ThermalLinkFlow_V::ThermalLinkFlow_V(const ThermalLinkFlow_V& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      flows_(from.flows_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:thermal_controller.ThermalLinkFlow_V)
}

void ThermalLinkFlow_V::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ThermalLinkFlow_V_thermal_5fcontroller_2fThermalLinkFlow_2eproto.base);
}

ThermalLinkFlow_V::~ThermalLinkFlow_V() {
  // @@protoc_insertion_point(destructor:thermal_controller.ThermalLinkFlow_V)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ThermalLinkFlow_V::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ThermalLinkFlow_V::ArenaDtor(void* object) {
  ThermalLinkFlow_V* _this = reinterpret_cast< ThermalLinkFlow_V* >(object);
  (void)_this;
}
void ThermalLinkFlow_V::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ThermalLinkFlow_V::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ThermalLinkFlow_V& ThermalLinkFlow_V::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ThermalLinkFlow_V_thermal_5fcontroller_2fThermalLinkFlow_2eproto.base);
  return *internal_default_instance();
}


void ThermalLinkFlow_V::Clear() {
// @@protoc_insertion_point(message_clear_start:thermal_controller.ThermalLinkFlow_V)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  flows_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ThermalLinkFlow_V::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .thermal_controller.ThermalLinkFlow flows = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_flows(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ThermalLinkFlow_V::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:thermal_controller.ThermalLinkFlow_V)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .thermal_controller.ThermalLinkFlow flows = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_flows_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_flows(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:thermal_controller.ThermalLinkFlow_V)
  return target;
}

size_t ThermalLinkFlow_V::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:thermal_controller.ThermalLinkFlow_V)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .thermal_controller.ThermalLinkFlow flows = 1;
  total_size += 1UL * this->_internal_flows_size();
  for (const auto& msg : this->flows_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ThermalLinkFlow_V::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:thermal_controller.ThermalLinkFlow_V)
  GOOGLE_DCHECK_NE(&from, this);
  const ThermalLinkFlow_V* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ThermalLinkFlow_V>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:thermal_controller.ThermalLinkFlow_V)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:thermal_controller.ThermalLinkFlow_V)
    MergeFrom(*source);
  }
}

void ThermalLinkFlow_V::MergeFrom(const ThermalLinkFlow_V& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:thermal_controller.ThermalLinkFlow_V)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  flows_.MergeFrom(from.flows_);
}

void ThermalLinkFlow_V::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:thermal_controller.ThermalLinkFlow_V)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ThermalLinkFlow_V::CopyFrom(const ThermalLinkFlow_V& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:thermal_controller.ThermalLinkFlow_V)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThermalLinkFlow_V::IsInitialized() const {
  return true;
}

void ThermalLinkFlow_V::InternalSwap(ThermalLinkFlow_V* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  flows_.InternalSwap(&other->flows_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ThermalLinkFlow_V::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace thermal_controller
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::thermal_controller::ThermalLinkFlow* Arena::CreateMaybeMessage< ::thermal_controller::ThermalLinkFlow >(Arena* arena) {
  return Arena::CreateMessageInternal< ::thermal_controller::ThermalLinkFlow >(arena);
}
template<> PROTOBUF_NOINLINE ::thermal_controller::ThermalLinkFlow_V* Arena::CreateMaybeMessage< ::thermal_controller::ThermalLinkFlow_V >(Arena* arena) {
  return Arena::CreateMessageInternal< ::thermal_controller::ThermalLinkFlow_V >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
