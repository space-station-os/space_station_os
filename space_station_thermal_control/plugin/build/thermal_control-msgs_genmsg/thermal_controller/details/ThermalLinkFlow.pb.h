// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: thermal_controller/ThermalLinkFlow.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_thermal_5fcontroller_2fThermalLinkFlow_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_thermal_5fcontroller_2fThermalLinkFlow_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_thermal_5fcontroller_2fThermalLinkFlow_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_thermal_5fcontroller_2fThermalLinkFlow_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_thermal_5fcontroller_2fThermalLinkFlow_2eproto;
namespace thermal_controller {
class ThermalLinkFlow;
class ThermalLinkFlowDefaultTypeInternal;
extern ThermalLinkFlowDefaultTypeInternal _ThermalLinkFlow_default_instance_;
class ThermalLinkFlow_V;
class ThermalLinkFlow_VDefaultTypeInternal;
extern ThermalLinkFlow_VDefaultTypeInternal _ThermalLinkFlow_V_default_instance_;
}  // namespace thermal_controller
PROTOBUF_NAMESPACE_OPEN
template<> ::thermal_controller::ThermalLinkFlow* Arena::CreateMaybeMessage<::thermal_controller::ThermalLinkFlow>(Arena*);
template<> ::thermal_controller::ThermalLinkFlow_V* Arena::CreateMaybeMessage<::thermal_controller::ThermalLinkFlow_V>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace thermal_controller {

// ===================================================================

class ThermalLinkFlow PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:thermal_controller.ThermalLinkFlow) */ {
 public:
  inline ThermalLinkFlow() : ThermalLinkFlow(nullptr) {};
  virtual ~ThermalLinkFlow();

  ThermalLinkFlow(const ThermalLinkFlow& from);
  ThermalLinkFlow(ThermalLinkFlow&& from) noexcept
    : ThermalLinkFlow() {
    *this = ::std::move(from);
  }

  inline ThermalLinkFlow& operator=(const ThermalLinkFlow& from) {
    CopyFrom(from);
    return *this;
  }
  inline ThermalLinkFlow& operator=(ThermalLinkFlow&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ThermalLinkFlow& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ThermalLinkFlow* internal_default_instance() {
    return reinterpret_cast<const ThermalLinkFlow*>(
               &_ThermalLinkFlow_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ThermalLinkFlow& a, ThermalLinkFlow& b) {
    a.Swap(&b);
  }
  inline void Swap(ThermalLinkFlow* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ThermalLinkFlow* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ThermalLinkFlow* New() const final {
    return CreateMaybeMessage<ThermalLinkFlow>(nullptr);
  }

  ThermalLinkFlow* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ThermalLinkFlow>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ThermalLinkFlow& from);
  void MergeFrom(const ThermalLinkFlow& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ThermalLinkFlow* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "thermal_controller.ThermalLinkFlow";
  }
  protected:
  explicit ThermalLinkFlow(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_thermal_5fcontroller_2fThermalLinkFlow_2eproto);
    return ::descriptor_table_thermal_5fcontroller_2fThermalLinkFlow_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromFieldNumber = 1,
    kToFieldNumber = 2,
    kConductanceFieldNumber = 3,
    kHeatFlowFieldNumber = 4,
  };
  // string from = 1;
  void clear_from();
  const std::string& from() const;
  void set_from(const std::string& value);
  void set_from(std::string&& value);
  void set_from(const char* value);
  void set_from(const char* value, size_t size);
  std::string* mutable_from();
  std::string* release_from();
  void set_allocated_from(std::string* from);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_from();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_from(
      std::string* from);
  private:
  const std::string& _internal_from() const;
  void _internal_set_from(const std::string& value);
  std::string* _internal_mutable_from();
  public:

  // string to = 2;
  void clear_to();
  const std::string& to() const;
  void set_to(const std::string& value);
  void set_to(std::string&& value);
  void set_to(const char* value);
  void set_to(const char* value, size_t size);
  std::string* mutable_to();
  std::string* release_to();
  void set_allocated_to(std::string* to);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_to();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_to(
      std::string* to);
  private:
  const std::string& _internal_to() const;
  void _internal_set_to(const std::string& value);
  std::string* _internal_mutable_to();
  public:

  // double conductance = 3;
  void clear_conductance();
  double conductance() const;
  void set_conductance(double value);
  private:
  double _internal_conductance() const;
  void _internal_set_conductance(double value);
  public:

  // double heat_flow = 4;
  void clear_heat_flow();
  double heat_flow() const;
  void set_heat_flow(double value);
  private:
  double _internal_heat_flow() const;
  void _internal_set_heat_flow(double value);
  public:

  // @@protoc_insertion_point(class_scope:thermal_controller.ThermalLinkFlow)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_;
  double conductance_;
  double heat_flow_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_thermal_5fcontroller_2fThermalLinkFlow_2eproto;
};
// -------------------------------------------------------------------

class ThermalLinkFlow_V PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:thermal_controller.ThermalLinkFlow_V) */ {
 public:
  inline ThermalLinkFlow_V() : ThermalLinkFlow_V(nullptr) {};
  virtual ~ThermalLinkFlow_V();

  ThermalLinkFlow_V(const ThermalLinkFlow_V& from);
  ThermalLinkFlow_V(ThermalLinkFlow_V&& from) noexcept
    : ThermalLinkFlow_V() {
    *this = ::std::move(from);
  }

  inline ThermalLinkFlow_V& operator=(const ThermalLinkFlow_V& from) {
    CopyFrom(from);
    return *this;
  }
  inline ThermalLinkFlow_V& operator=(ThermalLinkFlow_V&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ThermalLinkFlow_V& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ThermalLinkFlow_V* internal_default_instance() {
    return reinterpret_cast<const ThermalLinkFlow_V*>(
               &_ThermalLinkFlow_V_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ThermalLinkFlow_V& a, ThermalLinkFlow_V& b) {
    a.Swap(&b);
  }
  inline void Swap(ThermalLinkFlow_V* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ThermalLinkFlow_V* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ThermalLinkFlow_V* New() const final {
    return CreateMaybeMessage<ThermalLinkFlow_V>(nullptr);
  }

  ThermalLinkFlow_V* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ThermalLinkFlow_V>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ThermalLinkFlow_V& from);
  void MergeFrom(const ThermalLinkFlow_V& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ThermalLinkFlow_V* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "thermal_controller.ThermalLinkFlow_V";
  }
  protected:
  explicit ThermalLinkFlow_V(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_thermal_5fcontroller_2fThermalLinkFlow_2eproto);
    return ::descriptor_table_thermal_5fcontroller_2fThermalLinkFlow_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFlowsFieldNumber = 1,
  };
  // repeated .thermal_controller.ThermalLinkFlow flows = 1;
  int flows_size() const;
  private:
  int _internal_flows_size() const;
  public:
  void clear_flows();
  ::thermal_controller::ThermalLinkFlow* mutable_flows(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::thermal_controller::ThermalLinkFlow >*
      mutable_flows();
  private:
  const ::thermal_controller::ThermalLinkFlow& _internal_flows(int index) const;
  ::thermal_controller::ThermalLinkFlow* _internal_add_flows();
  public:
  const ::thermal_controller::ThermalLinkFlow& flows(int index) const;
  ::thermal_controller::ThermalLinkFlow* add_flows();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::thermal_controller::ThermalLinkFlow >&
      flows() const;

  // @@protoc_insertion_point(class_scope:thermal_controller.ThermalLinkFlow_V)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::thermal_controller::ThermalLinkFlow > flows_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_thermal_5fcontroller_2fThermalLinkFlow_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ThermalLinkFlow

// string from = 1;
inline void ThermalLinkFlow::clear_from() {
  from_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ThermalLinkFlow::from() const {
  // @@protoc_insertion_point(field_get:thermal_controller.ThermalLinkFlow.from)
  return _internal_from();
}
inline void ThermalLinkFlow::set_from(const std::string& value) {
  _internal_set_from(value);
  // @@protoc_insertion_point(field_set:thermal_controller.ThermalLinkFlow.from)
}
inline std::string* ThermalLinkFlow::mutable_from() {
  // @@protoc_insertion_point(field_mutable:thermal_controller.ThermalLinkFlow.from)
  return _internal_mutable_from();
}
inline const std::string& ThermalLinkFlow::_internal_from() const {
  return from_.Get();
}
inline void ThermalLinkFlow::_internal_set_from(const std::string& value) {
  
  from_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ThermalLinkFlow::set_from(std::string&& value) {
  
  from_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:thermal_controller.ThermalLinkFlow.from)
}
inline void ThermalLinkFlow::set_from(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  from_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:thermal_controller.ThermalLinkFlow.from)
}
inline void ThermalLinkFlow::set_from(const char* value,
    size_t size) {
  
  from_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:thermal_controller.ThermalLinkFlow.from)
}
inline std::string* ThermalLinkFlow::_internal_mutable_from() {
  
  return from_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ThermalLinkFlow::release_from() {
  // @@protoc_insertion_point(field_release:thermal_controller.ThermalLinkFlow.from)
  return from_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ThermalLinkFlow::set_allocated_from(std::string* from) {
  if (from != nullptr) {
    
  } else {
    
  }
  from_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:thermal_controller.ThermalLinkFlow.from)
}
inline std::string* ThermalLinkFlow::unsafe_arena_release_from() {
  // @@protoc_insertion_point(field_unsafe_arena_release:thermal_controller.ThermalLinkFlow.from)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return from_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ThermalLinkFlow::unsafe_arena_set_allocated_from(
    std::string* from) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (from != nullptr) {
    
  } else {
    
  }
  from_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      from, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:thermal_controller.ThermalLinkFlow.from)
}

// string to = 2;
inline void ThermalLinkFlow::clear_to() {
  to_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ThermalLinkFlow::to() const {
  // @@protoc_insertion_point(field_get:thermal_controller.ThermalLinkFlow.to)
  return _internal_to();
}
inline void ThermalLinkFlow::set_to(const std::string& value) {
  _internal_set_to(value);
  // @@protoc_insertion_point(field_set:thermal_controller.ThermalLinkFlow.to)
}
inline std::string* ThermalLinkFlow::mutable_to() {
  // @@protoc_insertion_point(field_mutable:thermal_controller.ThermalLinkFlow.to)
  return _internal_mutable_to();
}
inline const std::string& ThermalLinkFlow::_internal_to() const {
  return to_.Get();
}
inline void ThermalLinkFlow::_internal_set_to(const std::string& value) {
  
  to_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ThermalLinkFlow::set_to(std::string&& value) {
  
  to_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:thermal_controller.ThermalLinkFlow.to)
}
inline void ThermalLinkFlow::set_to(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  to_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:thermal_controller.ThermalLinkFlow.to)
}
inline void ThermalLinkFlow::set_to(const char* value,
    size_t size) {
  
  to_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:thermal_controller.ThermalLinkFlow.to)
}
inline std::string* ThermalLinkFlow::_internal_mutable_to() {
  
  return to_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ThermalLinkFlow::release_to() {
  // @@protoc_insertion_point(field_release:thermal_controller.ThermalLinkFlow.to)
  return to_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ThermalLinkFlow::set_allocated_to(std::string* to) {
  if (to != nullptr) {
    
  } else {
    
  }
  to_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), to,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:thermal_controller.ThermalLinkFlow.to)
}
inline std::string* ThermalLinkFlow::unsafe_arena_release_to() {
  // @@protoc_insertion_point(field_unsafe_arena_release:thermal_controller.ThermalLinkFlow.to)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return to_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ThermalLinkFlow::unsafe_arena_set_allocated_to(
    std::string* to) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (to != nullptr) {
    
  } else {
    
  }
  to_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      to, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:thermal_controller.ThermalLinkFlow.to)
}

// double conductance = 3;
inline void ThermalLinkFlow::clear_conductance() {
  conductance_ = 0;
}
inline double ThermalLinkFlow::_internal_conductance() const {
  return conductance_;
}
inline double ThermalLinkFlow::conductance() const {
  // @@protoc_insertion_point(field_get:thermal_controller.ThermalLinkFlow.conductance)
  return _internal_conductance();
}
inline void ThermalLinkFlow::_internal_set_conductance(double value) {
  
  conductance_ = value;
}
inline void ThermalLinkFlow::set_conductance(double value) {
  _internal_set_conductance(value);
  // @@protoc_insertion_point(field_set:thermal_controller.ThermalLinkFlow.conductance)
}

// double heat_flow = 4;
inline void ThermalLinkFlow::clear_heat_flow() {
  heat_flow_ = 0;
}
inline double ThermalLinkFlow::_internal_heat_flow() const {
  return heat_flow_;
}
inline double ThermalLinkFlow::heat_flow() const {
  // @@protoc_insertion_point(field_get:thermal_controller.ThermalLinkFlow.heat_flow)
  return _internal_heat_flow();
}
inline void ThermalLinkFlow::_internal_set_heat_flow(double value) {
  
  heat_flow_ = value;
}
inline void ThermalLinkFlow::set_heat_flow(double value) {
  _internal_set_heat_flow(value);
  // @@protoc_insertion_point(field_set:thermal_controller.ThermalLinkFlow.heat_flow)
}

// -------------------------------------------------------------------

// ThermalLinkFlow_V

// repeated .thermal_controller.ThermalLinkFlow flows = 1;
inline int ThermalLinkFlow_V::_internal_flows_size() const {
  return flows_.size();
}
inline int ThermalLinkFlow_V::flows_size() const {
  return _internal_flows_size();
}
inline void ThermalLinkFlow_V::clear_flows() {
  flows_.Clear();
}
inline ::thermal_controller::ThermalLinkFlow* ThermalLinkFlow_V::mutable_flows(int index) {
  // @@protoc_insertion_point(field_mutable:thermal_controller.ThermalLinkFlow_V.flows)
  return flows_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::thermal_controller::ThermalLinkFlow >*
ThermalLinkFlow_V::mutable_flows() {
  // @@protoc_insertion_point(field_mutable_list:thermal_controller.ThermalLinkFlow_V.flows)
  return &flows_;
}
inline const ::thermal_controller::ThermalLinkFlow& ThermalLinkFlow_V::_internal_flows(int index) const {
  return flows_.Get(index);
}
inline const ::thermal_controller::ThermalLinkFlow& ThermalLinkFlow_V::flows(int index) const {
  // @@protoc_insertion_point(field_get:thermal_controller.ThermalLinkFlow_V.flows)
  return _internal_flows(index);
}
inline ::thermal_controller::ThermalLinkFlow* ThermalLinkFlow_V::_internal_add_flows() {
  return flows_.Add();
}
inline ::thermal_controller::ThermalLinkFlow* ThermalLinkFlow_V::add_flows() {
  // @@protoc_insertion_point(field_add:thermal_controller.ThermalLinkFlow_V.flows)
  return _internal_add_flows();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::thermal_controller::ThermalLinkFlow >&
ThermalLinkFlow_V::flows() const {
  // @@protoc_insertion_point(field_list:thermal_controller.ThermalLinkFlow_V.flows)
  return flows_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace thermal_controller

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_thermal_5fcontroller_2fThermalLinkFlow_2eproto
