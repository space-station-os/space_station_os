/* This file was automatically generated by CasADi 3.6.7.
 *  It consists of: 
 *   1) content generated by CasADi runtime: not copyrighted
 *   2) template code copied from CasADi source: permissively licensed (MIT-0)
 *   3) user code: owned by the user
 *
 */
/* How to prefix internal symbols */
#ifdef CASADI_CODEGEN_PREFIX
  #define CASADI_NAMESPACE_CONCAT(NS, ID) _CASADI_NAMESPACE_CONCAT(NS, ID)
  #define _CASADI_NAMESPACE_CONCAT(NS, ID) NS ## ID
  #define CASADI_PREFIX(ID) CASADI_NAMESPACE_CONCAT(CODEGEN_PREFIX, ID)
#else
  #define CASADI_PREFIX(ID) L_p_func_ ## ID
#endif

#include <math.h>

#ifndef casadi_real
#define casadi_real double
#endif

#ifndef casadi_int
#define casadi_int long long int
#endif

/* Add prefix to internal symbols */
#define casadi_c0 CASADI_PREFIX(c0)
#define casadi_clear CASADI_PREFIX(clear)
#define casadi_copy CASADI_PREFIX(copy)
#define casadi_dot CASADI_PREFIX(dot)
#define casadi_f0 CASADI_PREFIX(f0)
#define casadi_f1 CASADI_PREFIX(f1)
#define casadi_house CASADI_PREFIX(house)
#define casadi_if_else CASADI_PREFIX(if_else)
#define casadi_qr CASADI_PREFIX(qr)
#define casadi_qr_colcomb CASADI_PREFIX(qr_colcomb)
#define casadi_qr_mv CASADI_PREFIX(qr_mv)
#define casadi_qr_singular CASADI_PREFIX(qr_singular)
#define casadi_qr_solve CASADI_PREFIX(qr_solve)
#define casadi_qr_trs CASADI_PREFIX(qr_trs)
#define casadi_s0 CASADI_PREFIX(s0)
#define casadi_s1 CASADI_PREFIX(s1)
#define casadi_s2 CASADI_PREFIX(s2)
#define casadi_s3 CASADI_PREFIX(s3)
#define casadi_s4 CASADI_PREFIX(s4)
#define casadi_s5 CASADI_PREFIX(s5)
#define casadi_s6 CASADI_PREFIX(s6)
#define casadi_scal CASADI_PREFIX(scal)

/* Symbol visibility in DLLs */
#ifndef CASADI_SYMBOL_EXPORT
  #if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
    #if defined(STATIC_LINKED)
      #define CASADI_SYMBOL_EXPORT
    #else
      #define CASADI_SYMBOL_EXPORT __declspec(dllexport)
    #endif
  #elif defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
    #define CASADI_SYMBOL_EXPORT __attribute__ ((visibility ("default")))
  #else
    #define CASADI_SYMBOL_EXPORT
  #endif
#endif

void casadi_clear(casadi_real* x, casadi_int n) {
  casadi_int i;
  if (x) {
    for (i=0; i<n; ++i) *x++ = 0;
  }
}

void casadi_copy(const casadi_real* x, casadi_int n, casadi_real* y) {
  casadi_int i;
  if (y) {
    if (x) {
      for (i=0; i<n; ++i) *y++ = *x++;
    } else {
      for (i=0; i<n; ++i) *y++ = 0.;
    }
  }
}

casadi_real casadi_if_else(casadi_real c, casadi_real x, casadi_real y) { return c!=0 ? x : y;}

void casadi_scal(casadi_int n, casadi_real alpha, casadi_real* x) {
  casadi_int i;
  if (!x) return;
  for (i=0; i<n; ++i) *x++ *= alpha;
}

casadi_real casadi_dot(casadi_int n, const casadi_real* x, const casadi_real* y) {
  casadi_int i;
  casadi_real r = 0;
  for (i=0; i<n; ++i) r += *x++ * *y++;
  return r;
}

casadi_real casadi_house(casadi_real* v, casadi_real* beta, casadi_int nv) {
  casadi_int i;
  casadi_real v0, sigma, s, sigma_is_zero, v0_nonpos;
  v0 = v[0];
  sigma=0;
  for (i=1; i<nv; ++i) sigma += v[i]*v[i];
  s = sqrt(v0*v0 + sigma);
  sigma_is_zero = sigma==0;
  v0_nonpos = v0<=0;
  v[0] = casadi_if_else(sigma_is_zero, 1,
                 casadi_if_else(v0_nonpos, v0-s, -sigma/(v0+s)));
  *beta = casadi_if_else(sigma_is_zero, 2*v0_nonpos, -1/(s*v[0]));
  return s;
}
void casadi_qr(const casadi_int* sp_a, const casadi_real* nz_a, casadi_real* x,
               const casadi_int* sp_v, casadi_real* nz_v, const casadi_int* sp_r, casadi_real* nz_r, casadi_real* beta,
               const casadi_int* prinv, const casadi_int* pc) {
   casadi_int ncol, nrow, r, c, k, k1;
   casadi_real alpha;
   const casadi_int *a_colind, *a_row, *v_colind, *v_row, *r_colind, *r_row;
   ncol = sp_a[1];
   a_colind=sp_a+2; a_row=sp_a+2+ncol+1;
   nrow = sp_v[0];
   v_colind=sp_v+2; v_row=sp_v+2+ncol+1;
   r_colind=sp_r+2; r_row=sp_r+2+ncol+1;
   for (r=0; r<nrow; ++r) x[r] = 0;
   for (c=0; c<ncol; ++c) {
     for (k=a_colind[pc[c]]; k<a_colind[pc[c]+1]; ++k) x[prinv[a_row[k]]] = nz_a[k];
     for (k=r_colind[c]; k<r_colind[c+1] && (r=r_row[k])<c; ++k) {
       alpha = 0;
       for (k1=v_colind[r]; k1<v_colind[r+1]; ++k1) alpha += nz_v[k1]*x[v_row[k1]];
       alpha *= beta[r];
       for (k1=v_colind[r]; k1<v_colind[r+1]; ++k1) x[v_row[k1]] -= alpha*nz_v[k1];
       *nz_r++ = x[r];
       x[r] = 0;
     }
     for (k=v_colind[c]; k<v_colind[c+1]; ++k) {
       nz_v[k] = x[v_row[k]];
       x[v_row[k]] = 0;
     }
     *nz_r++ = casadi_house(nz_v + v_colind[c], beta + c, v_colind[c+1] - v_colind[c]);
   }
 }
void casadi_qr_mv(const casadi_int* sp_v, const casadi_real* v, const casadi_real* beta, casadi_real* x,
                  casadi_int tr) {
  casadi_int ncol, c, c1, k;
  casadi_real alpha;
  const casadi_int *colind, *row;
  ncol=sp_v[1];
  colind=sp_v+2; row=sp_v+2+ncol+1;
  for (c1=0; c1<ncol; ++c1) {
    c = tr ? c1 : ncol-1-c1;
    alpha=0;
    for (k=colind[c]; k<colind[c+1]; ++k) alpha += v[k]*x[row[k]];
    alpha *= beta[c];
    for (k=colind[c]; k<colind[c+1]; ++k) x[row[k]] -= alpha*v[k];
  }
}
void casadi_qr_trs(const casadi_int* sp_r, const casadi_real* nz_r, casadi_real* x, casadi_int tr) {
  casadi_int ncol, r, c, k;
  const casadi_int *colind, *row;
  ncol=sp_r[1];
  colind=sp_r+2; row=sp_r+2+ncol+1;
  if (tr) {
    for (c=0; c<ncol; ++c) {
      for (k=colind[c]; k<colind[c+1]; ++k) {
        r = row[k];
        if (r==c) {
          x[c] /= nz_r[k];
        } else {
          x[c] -= nz_r[k]*x[r];
        }
      }
    }
  } else {
    for (c=ncol-1; c>=0; --c) {
      for (k=colind[c+1]-1; k>=colind[c]; --k) {
        r=row[k];
        if (r==c) {
          x[r] /= nz_r[k];
        } else {
          x[r] -= nz_r[k]*x[c];
        }
      }
    }
  }
}
void casadi_qr_solve(casadi_real* x, casadi_int nrhs, casadi_int tr,
                     const casadi_int* sp_v, const casadi_real* v, const casadi_int* sp_r, const casadi_real* r,
                     const casadi_real* beta, const casadi_int* prinv, const casadi_int* pc, casadi_real* w) {
  casadi_int k, c, nrow_ext, ncol;
  nrow_ext = sp_v[0]; ncol = sp_v[1];
  for (k=0; k<nrhs; ++k) {
    if (tr) {
      for (c=0; c<ncol; ++c) w[c] = x[pc[c]];
      casadi_qr_trs(sp_r, r, w, 1);
      casadi_qr_mv(sp_v, v, beta, w, 0);
      for (c=0; c<ncol; ++c) x[c] = w[prinv[c]];
    } else {
      for (c=0; c<nrow_ext; ++c) w[c] = 0;
      for (c=0; c<ncol; ++c) w[prinv[c]] = x[c];
      casadi_qr_mv(sp_v, v, beta, w, 1);
      casadi_qr_trs(sp_r, r, w, 0);
      for (c=0; c<ncol; ++c) x[pc[c]] = w[c];
    }
    x += ncol;
  }
}
casadi_int casadi_qr_singular(casadi_real* rmin, casadi_int* irmin, const casadi_real* nz_r,
                             const casadi_int* sp_r, const casadi_int* pc, casadi_real eps) {
  casadi_real rd, rd_min;
  casadi_int ncol, c, nullity;
  const casadi_int* r_colind;
  nullity = 0;
  ncol = sp_r[1];
  r_colind = sp_r + 2;
  for (c=0; c<ncol; ++c) {
    rd = fabs(nz_r[r_colind[c+1]-1]);
    if (rd<eps) nullity++;
    if (c==0 || rd < rd_min) {
      rd_min = rd;
      if (rmin) *rmin = rd;
      if (irmin) *irmin = pc[c];
    }
  }
  return nullity;
}
void casadi_qr_colcomb(casadi_real* v, const casadi_real* nz_r, const casadi_int* sp_r,
                       const casadi_int* pc, casadi_real eps, casadi_int ind) {
  casadi_int ncol, r, c, k;
  const casadi_int *r_colind, *r_row;
  ncol = sp_r[1];
  r_colind = sp_r + 2;
  r_row = r_colind + ncol + 1;
  for (c=0; c<ncol; ++c) {
    if (fabs(nz_r[r_colind[c+1]-1])<eps && 0==ind--) {
      ind = c;
      break;
    }
  }
  casadi_clear(v, ncol);
  v[pc[ind]] = 1.;
  for (k=r_colind[ind]; k<r_colind[ind+1]-1; ++k) {
    v[pc[r_row[k]]] = -nz_r[k];
  }
  for (c=ind-1; c>=0; --c) {
    for (k=r_colind[c+1]-1; k>=r_colind[c]; --k) {
      r=r_row[k];
      if (r==c) {
        if (fabs(nz_r[k])<eps) {
          v[pc[r]] = 0;
        } else {
          v[pc[r]] /= nz_r[k];
        }
      } else {
        v[pc[r]] -= nz_r[k]*v[pc[c]];
      }
    }
  }
  casadi_scal(ncol, 1./sqrt(casadi_dot(ncol, v, v)), v);
}

static const casadi_int casadi_s0[3] = {0, 1, 2};
static const casadi_int casadi_s1[15] = {3, 3, 0, 3, 6, 9, 0, 1, 2, 0, 1, 2, 0, 1, 2};
static const casadi_int casadi_s2[12] = {3, 3, 0, 3, 5, 6, 0, 1, 2, 1, 2, 2};
static const casadi_int casadi_s3[12] = {3, 3, 0, 1, 3, 6, 0, 0, 1, 0, 1, 2};
static const casadi_int casadi_s4[5] = {1, 1, 0, 1, 0};
static const casadi_int casadi_s5[18] = {4, 3, 0, 4, 8, 12, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3};
static const casadi_int casadi_s6[7] = {3, 1, 0, 3, 0, 1, 2};

static const casadi_real casadi_c0[9] = {1., 0., 0., 0., 1., 0., 0., 0., 1.};

/* pseudoInvFunc:(i0,i1,i2,i3)->(o0[4x3]) */
static int casadi_f0(const casadi_real** arg, casadi_real** res, casadi_int* iw, casadi_real* w, int mem) {
  casadi_int i, j, k;
  casadi_real *rr, *ss, *tt;
  const casadi_real *cs;
  casadi_real *w0=w+4, *w1=w+16, w2, w3, w4, w5, w6, w7, *w8=w+34, *w9=w+37, *w10=w+46, *w11=w+55;
  /* #0: @0 = zeros(4x3) */
  casadi_clear(w0, 12);
  /* #1: @1 = zeros(4x3) */
  casadi_clear(w1, 12);
  /* #2: @2 = 1000 */
  w2 = 1000.;
  /* #3: @3 = -0.57743 */
  w3 = -5.7743021654867299e-01;
  /* #4: @4 = input[0][0] */
  w4 = arg[0] ? arg[0][0] : 0;
  /* #5: @5 = cos(@4) */
  w5 = cos( w4 );
  /* #6: @6 = ones(1x4,1nz) */
  w6 = 1.;
  /* #7: {@7, NULL, NULL, NULL} = horzsplit(@6) */
  w7 = w6;
  /* #8: @5 = (@5*@7) */
  w5 *= w7;
  /* #9: @3 = (@3*@5) */
  w3 *= w5;
  /* #10: @5 = sin(@4) */
  w5 = sin( w4 );
  /* #11: @5 = (@5*@7) */
  w5 *= w7;
  /* #12: @5 = (-@5) */
  w5 = (- w5 );
  /* #13: @6 = 0.81644 */
  w6 = 8.1644004373655787e-01;
  /* #14: @4 = cos(@4) */
  w4 = cos( w4 );
  /* #15: @4 = (@4*@7) */
  w4 *= w7;
  /* #16: @6 = (@6*@4) */
  w6 *= w4;
  /* #17: @8 = vertcat(@3, @5, @6) */
  rr=w8;
  *rr++ = w3;
  *rr++ = w5;
  *rr++ = w6;
  /* #18: @8 = (@2*@8) */
  for (i=0, rr=w8, cs=w8; i<3; ++i) (*rr++)  = (w2*(*cs++));
  /* #19: (@1[:12:4] = @8) */
  for (rr=w1+0, ss=w8; rr!=w1+12; rr+=4) *rr = *ss++;
  /* #20: @3 = input[1][0] */
  w3 = arg[1] ? arg[1][0] : 0;
  /* #21: @5 = sin(@3) */
  w5 = sin( w3 );
  /* #22: @6 = ones(1x4,1nz) */
  w6 = 1.;
  /* #23: {NULL, @4, NULL, NULL} = horzsplit(@6) */
  w4 = w6;
  /* #24: @5 = (@5*@4) */
  w5 *= w4;
  /* #25: @6 = -0.57743 */
  w6 = -5.7743021654867299e-01;
  /* #26: @7 = cos(@3) */
  w7 = cos( w3 );
  /* #27: @7 = (@7*@4) */
  w7 *= w4;
  /* #28: @6 = (@6*@7) */
  w6 *= w7;
  /* #29: @7 = 0.81644 */
  w7 = 8.1644004373655787e-01;
  /* #30: @3 = cos(@3) */
  w3 = cos( w3 );
  /* #31: @3 = (@3*@4) */
  w3 *= w4;
  /* #32: @7 = (@7*@3) */
  w7 *= w3;
  /* #33: @8 = vertcat(@5, @6, @7) */
  rr=w8;
  *rr++ = w5;
  *rr++ = w6;
  *rr++ = w7;
  /* #34: @8 = (@2*@8) */
  for (i=0, rr=w8, cs=w8; i<3; ++i) (*rr++)  = (w2*(*cs++));
  /* #35: (@1[1:13:4] = @8) */
  for (rr=w1+1, ss=w8; rr!=w1+13; rr+=4) *rr = *ss++;
  /* #36: @5 = 0.57743 */
  w5 = 5.7743021654867299e-01;
  /* #37: @6 = input[2][0] */
  w6 = arg[2] ? arg[2][0] : 0;
  /* #38: @7 = cos(@6) */
  w7 = cos( w6 );
  /* #39: @3 = ones(1x4,1nz) */
  w3 = 1.;
  /* #40: {NULL, NULL, @4, NULL} = horzsplit(@3) */
  w4 = w3;
  /* #41: @7 = (@7*@4) */
  w7 *= w4;
  /* #42: @5 = (@5*@7) */
  w5 *= w7;
  /* #43: @7 = sin(@6) */
  w7 = sin( w6 );
  /* #44: @7 = (@7*@4) */
  w7 *= w4;
  /* #45: @3 = 0.81644 */
  w3 = 8.1644004373655787e-01;
  /* #46: @6 = cos(@6) */
  w6 = cos( w6 );
  /* #47: @6 = (@6*@4) */
  w6 *= w4;
  /* #48: @3 = (@3*@6) */
  w3 *= w6;
  /* #49: @8 = vertcat(@5, @7, @3) */
  rr=w8;
  *rr++ = w5;
  *rr++ = w7;
  *rr++ = w3;
  /* #50: @8 = (@2*@8) */
  for (i=0, rr=w8, cs=w8; i<3; ++i) (*rr++)  = (w2*(*cs++));
  /* #51: (@1[2:14:4] = @8) */
  for (rr=w1+2, ss=w8; rr!=w1+14; rr+=4) *rr = *ss++;
  /* #52: @5 = input[3][0] */
  w5 = arg[3] ? arg[3][0] : 0;
  /* #53: @7 = sin(@5) */
  w7 = sin( w5 );
  /* #54: @3 = ones(1x4,1nz) */
  w3 = 1.;
  /* #55: {NULL, NULL, NULL, @6} = horzsplit(@3) */
  w6 = w3;
  /* #56: @7 = (@7*@6) */
  w7 *= w6;
  /* #57: @7 = (-@7) */
  w7 = (- w7 );
  /* #58: @3 = 0.57743 */
  w3 = 5.7743021654867299e-01;
  /* #59: @4 = cos(@5) */
  w4 = cos( w5 );
  /* #60: @4 = (@4*@6) */
  w4 *= w6;
  /* #61: @3 = (@3*@4) */
  w3 *= w4;
  /* #62: @4 = 0.81644 */
  w4 = 8.1644004373655787e-01;
  /* #63: @5 = cos(@5) */
  w5 = cos( w5 );
  /* #64: @5 = (@5*@6) */
  w5 *= w6;
  /* #65: @4 = (@4*@5) */
  w4 *= w5;
  /* #66: @8 = vertcat(@7, @3, @4) */
  rr=w8;
  *rr++ = w7;
  *rr++ = w3;
  *rr++ = w4;
  /* #67: @8 = (@2*@8) */
  for (i=0, rr=w8, cs=w8; i<3; ++i) (*rr++)  = (w2*(*cs++));
  /* #68: (@1[3:15:4] = @8) */
  for (rr=w1+3, ss=w8; rr!=w1+15; rr+=4) *rr = *ss++;
  /* #69: @9 = 
  [[1, 0, 0], 
   [0, 1, 0], 
   [0, 0, 1]] */
  casadi_copy(casadi_c0, 9, w9);
  /* #70: @10 = zeros(3x3) */
  casadi_clear(w10, 9);
  /* #71: @11 = @1' */
  for (i=0, rr=w11, cs=w1; i<3; ++i) for (j=0; j<4; ++j) rr[i+j*3] = *cs++;
  /* #72: @10 = mac(@11,@1,@10) */
  for (i=0, rr=w10; i<3; ++i) for (j=0; j<3; ++j, ++rr) for (k=0, ss=w11+j, tt=w1+i*4; k<4; ++k) *rr += ss[k*3]**tt++;
  /* #73: @9 = (@10\@9) */
  rr = w9;
  ss = w10;
  {
    /* FIXME(@jaeandersson): Memory allocation can be avoided */
    casadi_real v[6], r[6], beta[3], w[6];
    casadi_qr(casadi_s1, ss, w, casadi_s2, v, casadi_s3, r, beta, casadi_s0, casadi_s0);
    casadi_qr_solve(rr, 3, 0, casadi_s2, v, casadi_s3, r, beta, casadi_s0, casadi_s0, w);
  }
  /* #74: @0 = mac(@1,@9,@0) */
  for (i=0, rr=w0; i<3; ++i) for (j=0; j<4; ++j, ++rr) for (k=0, ss=w1+j, tt=w9+i*3; k<3; ++k) *rr += ss[k*4]**tt++;
  /* #75: output[0][0] = @0 */
  casadi_copy(w0, 12, res[0]);
  return 0;
}

extern "C" CASADI_SYMBOL_EXPORT int pseudoInvFunc(const casadi_real** arg, casadi_real** res, casadi_int* iw, casadi_real* w, int mem){
  return casadi_f0(arg, res, iw, w, mem);
}

extern "C" CASADI_SYMBOL_EXPORT int pseudoInvFunc_alloc_mem(void) {
  return 0;
}

extern "C" CASADI_SYMBOL_EXPORT int pseudoInvFunc_init_mem(int mem) {
  return 0;
}

extern "C" CASADI_SYMBOL_EXPORT void pseudoInvFunc_free_mem(int mem) {
}

extern "C" CASADI_SYMBOL_EXPORT int pseudoInvFunc_checkout(void) {
  return 0;
}

extern "C" CASADI_SYMBOL_EXPORT void pseudoInvFunc_release(int mem) {
}

extern "C" CASADI_SYMBOL_EXPORT void pseudoInvFunc_incref(void) {
}

extern "C" CASADI_SYMBOL_EXPORT void pseudoInvFunc_decref(void) {
}

extern "C" CASADI_SYMBOL_EXPORT casadi_int pseudoInvFunc_n_in(void) { return 4;}

extern "C" CASADI_SYMBOL_EXPORT casadi_int pseudoInvFunc_n_out(void) { return 1;}

extern "C" CASADI_SYMBOL_EXPORT casadi_real pseudoInvFunc_default_in(casadi_int i) {
  switch (i) {
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT const char* pseudoInvFunc_name_in(casadi_int i) {
  switch (i) {
    case 0: return "i0";
    case 1: return "i1";
    case 2: return "i2";
    case 3: return "i3";
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT const char* pseudoInvFunc_name_out(casadi_int i) {
  switch (i) {
    case 0: return "o0";
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT const casadi_int* pseudoInvFunc_sparsity_in(casadi_int i) {
  switch (i) {
    case 0: return casadi_s4;
    case 1: return casadi_s4;
    case 2: return casadi_s4;
    case 3: return casadi_s4;
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT const casadi_int* pseudoInvFunc_sparsity_out(casadi_int i) {
  switch (i) {
    case 0: return casadi_s5;
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT int pseudoInvFunc_work(casadi_int *sz_arg, casadi_int* sz_res, casadi_int *sz_iw, casadi_int *sz_w) {
  if (sz_arg) *sz_arg = 7;
  if (sz_res) *sz_res = 5;
  if (sz_iw) *sz_iw = 0;
  if (sz_w) *sz_w = 67;
  return 0;
}

extern "C" CASADI_SYMBOL_EXPORT int pseudoInvFunc_work_bytes(casadi_int *sz_arg, casadi_int* sz_res, casadi_int *sz_iw, casadi_int *sz_w) {
  if (sz_arg) *sz_arg = 7*sizeof(const casadi_real*);
  if (sz_res) *sz_res = 5*sizeof(casadi_real*);
  if (sz_iw) *sz_iw = 0*sizeof(casadi_int);
  if (sz_w) *sz_w = 67*sizeof(casadi_real);
  return 0;
}

/* hFunc:(i0,i1,i2,i3)->(o0[3]) */
static int casadi_f1(const casadi_real** arg, casadi_real** res, casadi_int* iw, casadi_real* w, int mem) {
  casadi_int i;
  casadi_real *rr;
  const casadi_real *cs;
  casadi_real w0, w1, w2, w3, w4, *w5=w+5, *w6=w+8;
  /* #0: @0 = 1000 */
  w0 = 1000.;
  /* #1: @1 = -0.57743 */
  w1 = -5.7743021654867299e-01;
  /* #2: @2 = input[0][0] */
  w2 = arg[0] ? arg[0][0] : 0;
  /* #3: @3 = sin(@2) */
  w3 = sin( w2 );
  /* #4: @1 = (@1*@3) */
  w1 *= w3;
  /* #5: @3 = cos(@2) */
  w3 = cos( w2 );
  /* #6: @4 = 0.81644 */
  w4 = 8.1644004373655787e-01;
  /* #7: @2 = sin(@2) */
  w2 = sin( w2 );
  /* #8: @4 = (@4*@2) */
  w4 *= w2;
  /* #9: @5 = vertcat(@1, @3, @4) */
  rr=w5;
  *rr++ = w1;
  *rr++ = w3;
  *rr++ = w4;
  /* #10: @1 = input[1][0] */
  w1 = arg[1] ? arg[1][0] : 0;
  /* #11: @3 = cos(@1) */
  w3 = cos( w1 );
  /* #12: @3 = (-@3) */
  w3 = (- w3 );
  /* #13: @4 = -0.57743 */
  w4 = -5.7743021654867299e-01;
  /* #14: @2 = sin(@1) */
  w2 = sin( w1 );
  /* #15: @4 = (@4*@2) */
  w4 *= w2;
  /* #16: @2 = 0.81644 */
  w2 = 8.1644004373655787e-01;
  /* #17: @1 = sin(@1) */
  w1 = sin( w1 );
  /* #18: @2 = (@2*@1) */
  w2 *= w1;
  /* #19: @6 = vertcat(@3, @4, @2) */
  rr=w6;
  *rr++ = w3;
  *rr++ = w4;
  *rr++ = w2;
  /* #20: @5 = (@5+@6) */
  for (i=0, rr=w5, cs=w6; i<3; ++i) (*rr++) += (*cs++);
  /* #21: @3 = 0.57743 */
  w3 = 5.7743021654867299e-01;
  /* #22: @4 = input[2][0] */
  w4 = arg[2] ? arg[2][0] : 0;
  /* #23: @2 = sin(@4) */
  w2 = sin( w4 );
  /* #24: @3 = (@3*@2) */
  w3 *= w2;
  /* #25: @2 = cos(@4) */
  w2 = cos( w4 );
  /* #26: @2 = (-@2) */
  w2 = (- w2 );
  /* #27: @1 = 0.81644 */
  w1 = 8.1644004373655787e-01;
  /* #28: @4 = sin(@4) */
  w4 = sin( w4 );
  /* #29: @1 = (@1*@4) */
  w1 *= w4;
  /* #30: @6 = vertcat(@3, @2, @1) */
  rr=w6;
  *rr++ = w3;
  *rr++ = w2;
  *rr++ = w1;
  /* #31: @5 = (@5+@6) */
  for (i=0, rr=w5, cs=w6; i<3; ++i) (*rr++) += (*cs++);
  /* #32: @3 = input[3][0] */
  w3 = arg[3] ? arg[3][0] : 0;
  /* #33: @2 = cos(@3) */
  w2 = cos( w3 );
  /* #34: @1 = 0.57743 */
  w1 = 5.7743021654867299e-01;
  /* #35: @4 = sin(@3) */
  w4 = sin( w3 );
  /* #36: @1 = (@1*@4) */
  w1 *= w4;
  /* #37: @4 = 0.81644 */
  w4 = 8.1644004373655787e-01;
  /* #38: @3 = sin(@3) */
  w3 = sin( w3 );
  /* #39: @4 = (@4*@3) */
  w4 *= w3;
  /* #40: @6 = vertcat(@2, @1, @4) */
  rr=w6;
  *rr++ = w2;
  *rr++ = w1;
  *rr++ = w4;
  /* #41: @5 = (@5+@6) */
  for (i=0, rr=w5, cs=w6; i<3; ++i) (*rr++) += (*cs++);
  /* #42: @5 = (@0*@5) */
  for (i=0, rr=w5, cs=w5; i<3; ++i) (*rr++)  = (w0*(*cs++));
  /* #43: output[0][0] = @5 */
  casadi_copy(w5, 3, res[0]);
  return 0;
}

extern "C" CASADI_SYMBOL_EXPORT int hFunc(const casadi_real** arg, casadi_real** res, casadi_int* iw, casadi_real* w, int mem){
  return casadi_f1(arg, res, iw, w, mem);
}

extern "C" CASADI_SYMBOL_EXPORT int hFunc_alloc_mem(void) {
  return 0;
}

extern "C" CASADI_SYMBOL_EXPORT int hFunc_init_mem(int mem) {
  return 0;
}

extern "C" CASADI_SYMBOL_EXPORT void hFunc_free_mem(int mem) {
}

extern "C" CASADI_SYMBOL_EXPORT int hFunc_checkout(void) {
  return 0;
}

extern "C" CASADI_SYMBOL_EXPORT void hFunc_release(int mem) {
}

extern "C" CASADI_SYMBOL_EXPORT void hFunc_incref(void) {
}

extern "C" CASADI_SYMBOL_EXPORT void hFunc_decref(void) {
}

extern "C" CASADI_SYMBOL_EXPORT casadi_int hFunc_n_in(void) { return 4;}

extern "C" CASADI_SYMBOL_EXPORT casadi_int hFunc_n_out(void) { return 1;}

extern "C" CASADI_SYMBOL_EXPORT casadi_real hFunc_default_in(casadi_int i) {
  switch (i) {
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT const char* hFunc_name_in(casadi_int i) {
  switch (i) {
    case 0: return "i0";
    case 1: return "i1";
    case 2: return "i2";
    case 3: return "i3";
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT const char* hFunc_name_out(casadi_int i) {
  switch (i) {
    case 0: return "o0";
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT const casadi_int* hFunc_sparsity_in(casadi_int i) {
  switch (i) {
    case 0: return casadi_s4;
    case 1: return casadi_s4;
    case 2: return casadi_s4;
    case 3: return casadi_s4;
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT const casadi_int* hFunc_sparsity_out(casadi_int i) {
  switch (i) {
    case 0: return casadi_s6;
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT int hFunc_work(casadi_int *sz_arg, casadi_int* sz_res, casadi_int *sz_iw, casadi_int *sz_w) {
  if (sz_arg) *sz_arg = 7;
  if (sz_res) *sz_res = 2;
  if (sz_iw) *sz_iw = 0;
  if (sz_w) *sz_w = 11;
  return 0;
}

extern "C" CASADI_SYMBOL_EXPORT int hFunc_work_bytes(casadi_int *sz_arg, casadi_int* sz_res, casadi_int *sz_iw, casadi_int *sz_w) {
  if (sz_arg) *sz_arg = 7*sizeof(const casadi_real*);
  if (sz_res) *sz_res = 2*sizeof(casadi_real*);
  if (sz_iw) *sz_iw = 0*sizeof(casadi_int);
  if (sz_w) *sz_w = 11*sizeof(casadi_real);
  return 0;
}


